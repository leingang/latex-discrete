% \iffalse meta-comment
% http://www.texdev.net/2009/10/06/a-model-dtx-file/
% !TEX program  = xelatex
%<*internal>
\iffalse
%</internal>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
-----------------------------------------------------------------------------
discrete.dtx --- macros to typeset calculus documents
E-mail: leingang@nyu.edu
All rights reserved.
-----------------------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2018 by Matthew Leingang <leingang@nyu.edu>

This work consists of the file  discrete.dtx
and the derived files           discrete.sty
                                discrete.ins
                                discrete.bib
                                discrete.pdf

\endpostamble
%<install>\UseTDS
\usedir{tex/latex}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble
\nopostamble
\generate{
  \file{\jobname.bib}{\from{\jobname.dtx}{bibliography}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{discrete}[2019/06/13 v0.6.0 Discrete Math macros]
%</package>
%<*driver>
\documentclass{amsdtx}
% \cls{amsdtx} derives from \cls{book}, which make the bibliography a chapter rather than a section.
% So I need to re-define it.
\makeatletter
\newcommand{\refname}{Bibliography}
\renewenvironment{thebibliography}[1]
     {\section*{\refname}%
      \@mkboth{\MakeUppercase\refname}{\MakeUppercase\refname}%
      \list{\@biblabel{\@arabic\c@enumiv}}%
           {\settowidth\labelwidth{\@biblabel{#1}}%
            \leftmargin\labelwidth
            \advance\leftmargin\labelsep
            \@openbib@code
            \usecounter{enumiv}%
            \let\p@enumiv\@empty
            \renewcommand\theenumiv{\@arabic\c@enumiv}}%
      \sloppy
      \clubpenalty4000
      \@clubpenalty \clubpenalty
      \widowpenalty4000%
      \sfcode`\.\@m}
     {\def\@noitemerr
       {\@latex@warning{Empty `thebibliography' environment}}%
      \endlist}
\makeatother
\usepackage[letterpaper]{geometry}
\usepackage[numbered]{hypdoc}
\usepackage{\jobname}

% Code examples (issue #2)
\usepackage{ydoc-expl}
\usepackage[most]{tcolorbox}
\usepackage{etoolbox}
\lstset{backgroundcolor=\color{blue!10}}
\input{svgnam.def}
% Use a dogeared color box like tcolorbox's marker style <http://tex.stackexchange.com/a/307436/1402>
\newtcolorbox{marker}[1][]{enhanced,
    before skip=2mm,after skip=3mm,
    boxrule=0.4pt,left=5mm,right=2mm,top=1mm,bottom=1mm,
    colframe=LightGoldenrodYellow!50!black,
    colback=LightGoldenrodYellow,
    width=1cm+\wd\exampleresultbox,
    halign=center,
    sharp corners,rounded corners=northeast,arc is angular,arc=3mm,
    underlay={%
    \path[fill=tcbcol@back!80!black]
        ([xshift=-3mm]interior.north east)--++(0,-0.3)--++(0.3,0);
    \path[draw=tcbcol@frame,shorten <=-0.05mm,shorten >=-0.05mm]
        ([xshift=-3mm]interior.north east)--++(0,-0.3)--++(0.3,0);
    },
    drop fuzzy shadow,#1}
\newcommand{\styleresultbox}[1]{%
    \begin{marker}
    \mbox{#1}
    \end{marker}
}

% There are two \cn{fbox}es that need to be patched.
\patchcmd{\PrintExample}{\fbox}{\styleresultbox}{}{}
\patchcmd{\PrintExample}{\fbox}{\styleresultbox}{}{}
% I want to add to the style but don't know how without
% copying
\lstdefinestyle{examplecode}{%
    language=[latex]tex,
    basicstyle=\ttfamily,
    columns=fullflexible,
    numbers=left,
    firstnumber=1,
    numberstyle=\tiny\color{gray}\sffamily,
    numbersep=5pt,
    breaklines,prebreak={\mbox{\tiny$\swarrow$}},
    commentstyle=\color{black!60},
    frame=trbl,
    frameround=tttt
}%

\lstdefinestyle{terminal}{
  language=sh,basicstyle=\ttfamily,emphstyle={\slshape}
}
\lstnewenvironment{lstterm}[1][]{%
    \lstset{
      style=terminal,
      gobble=2,
      #1
    }}
{}

%\usepackage{dtklogos}
%\def\tikz/{\pkg{\protect{\normalfont Ti\textit{k}Z}}}
%\def\pgf/{\pkg{\protect{\normalfont\textsc{pgf}}}}
%\def\pgfplots/{\pkg{\protect{\normalfont\textsc{pgfplots}}}}
\def\xetex/{\protect{\XeTeX}}
\makeatletter
\DeclareRobustCommand{\tk}{\category@index{TikZ key}}
\DeclareRobustCommand{\coolkey}{\category@index{COOL key}}
\makeatother
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%\GetFileInfo{discrete.sty}
%
% \title{Macros for typesetting discrete math documents}
% \author{Matthew Leingang\thanks{Email: leingang@nyu.edu}}
% \date{Released \filedate\thanks{Version: \fileversion}}
% 
% \maketitle
% \tableofcontents
% \changes{v0.1}{2018/10/05}{Package created}
% \changes{v0.2}{2018/10/10}{Macros added to facilitate set theory and boolean algebra}
% \changes{v0.5.1}{2019/05/31}{Improved documentation}
% \changes{v0.6.0}{2019/06/13}{Changed package name to \pkg{discrete}}
% \changes{unreleased}{2020/01/21}{Moved end-of-package guard to end of package code}
% \StopEventually{^^A
%   \PrintChanges
%   \PrintIndex
% }
%
%
% \section{Introduction}
%
% This package is for typesetting documents for discrete mathematics.
% The style is based on Scheinermman, but it can be easily overwritten.
% 
% \section{Installation}
% 
% If you have the git repository, and a \TeX-live installation,
% type this at the command line: 
%
% \begin{lstterm}
% $ l3build install --full
% \end{lstterm}  
%
% This should install the package in a place that your TeX installation
% can find it and also that you can write to.  The \texttt{--full} 
% option also installs documentation.  
%
% \section{Usage/Implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Helper packages.
% \changes{v0.4.0}{2019/02/25}{Added the \env{amssymb} package}
%    \begin{macrocode}
\RequirePackage{amsmath}
\RequirePackage{amsfonts}
\RequirePackage{amssymb}
\RequirePackage{mathtools}
%    \end{macrocode}
%
% \subsection{Constants}
%
% \begin{macro}{\Z}
% \begin{macro}{\Q}
% \begin{macro}{\R}
% \begin{macro}{\N}
% \changes{v0.3}{2018/11/18}{Added the natural numbers macro}  
% Integers, rational numbers, real numbers.
%
% Note: Some of my older style files have already defined these macros.
% So we use \cn{providecommand} instead of \cn{newcommand} to avoid an error.
% The consequence is that if the macros are already defined \emph{and do 
% something else}, they will not be changed.  
% \begin{example}
% \begin{examplecode}
%    $\Z$, $\Q$, $\R$
% \end{examplecode}
% \end{example}
%    \begin{macrocode}
\providecommand{\Z}{\mathbb{Z}}
\providecommand{\Q}{\mathbb{Q}}
\providecommand{\R}{\mathbb{R}}
\providecommand{\N}{\mathbb{N}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \subsection{Relations}
%
% \begin{macro}{\divides}
%    \begin{macrocode}
\newcommand{\divides}{\mathrel{|}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ndivides}
% \changes{v0.4.0}{2019/02/25}{Added}
%    \begin{macrocode}
\newcommand{\ndivides}{\mathrel{\nmid}}
%    \end{macrocode}
% \end{macro}
  
% \subsection{Boolean algebra}
%
% \begin{macro}{\ltrue}
% \begin{macro}{\false}
% Logical true and false.
% \begin{example}
% \begin{examplecode}
%    $\begin{aligned}
%        x \land \lnot x &= \lfalse \\
%        x \lor \lnot x &= \ltrue \\
%        x \lnand x &= \lnot x
%    \end{aligned}$
% \end{examplecode}
% \caption{Boolean algebra examples}
% \label{exam-bool}
% \end{example}
%
%    \begin{macrocode}
\providecommand{\mathsc}[1]{{\normalfont\textsc{#1}}}
\newcommand{\ltrue}{\mathsc{true}}
\newcommand{\lfalse}{\mathsc{false}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\lnand}
% \begin{macro}{\lxor}
% \changes{v0.4.0}{2019/03/10}{Added \cn{lnand} and \cn{lxor}}
% \begin{macro}{\limplies}
% \begin{macro}{\lseilpmi}
% \begin{macro}{\lisimpliedby}
% \changes{unreleased}{2020/02/03}{Added \cn{isimpliedby} as a synonym to the (hard to type) \cn{lseilpmi}}
% \begin{macro}{\liff}
% Boolean algebra operations for implies, is-implied-by, 
% and if-and-only-if.
% Note that \cn{land} ($\land$) and \cn{lor} ($\lor$) 
% are already defined by another package.
% \begin{example}
% \begin{examplecode}
%    $\begin{aligned}
%        p \limplies q &= \lnot p \lor q \\
%        p \lseilpmi q &= q \limplies p \\
%        p \liff q     &= (p \limplies q) \land (q \limplies p)\\
%        p \lxor q     &= (p \lor q) \land \lnot (p \land q)
%    \end{aligned}$
% \end{examplecode}
% \end{example}
%    \begin{macrocode}
\newcommand{\limplies}{\rightarrow}
\newcommand{\lseilpmi}{\leftarrow}
\newcommand{\lisimpliedby}{\leftarrow}
\newcommand{\liff}{\leftrightarrow}
\newcommand{\lnand}{\barwedge}
\newcommand{\lxor}{\veebar}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Set theory}
%
% \begin{macro}{\set}
% \begin{macro}{\setst}
% The \cn{set} command encloses a set with ``roster'' notation.
% The \cn{set} command encloses a set with ``set-builder'' notation
%
% Note: See the note above for \cn{\R} etc.  We use \cn{providecommand}
% here in the definition of \cn{set} to avoid an error caused by 
% re-defining a command without \cn{renewcommand}.  There could be some 
% unintended consequences if you have a \cn{set} macro that does 
% something else.
%
% For \cn{setst}, we really do want to overwrite any existing definition.
% This is because I defined \cn{setst} in the \pkg{leintex2e} package
% a long time ago, and it's included in the nge bundle of classes.
% The pattern below allows for quick and dirty “define this if it doesn't 
% already exist, and redefine it if it already does.”
%
% \begin{example}
% \begin{examplecode}
%    $A = \set{1,2,3}$
% \end{examplecode}
% \begin{examplecode}
%    $A = \setst{x}{2 \divides x}$
% \end{examplecode}
% \caption{Constructing sets with roster and set-builder notation}
% \label{exam-bool}
% \end{example}
%    \begin{macrocode}
\providecommand{\set}[1]{\left\{#1\right\}}
\let\setst\outer
\renewcommand{\setst}[2]{\left\{#1 : #2 \right\}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{example}
% \begin{examplecode}
%    $A \symdiff B = (A \setdiff B) \union (B \setdiff A) 
%    = (A \union B) \setdiff (B \intersect A)$
% \end{examplecode}
% \end{example}
% \begin{macro}{\union}
% The union of two sets.
%    \begin{macrocode}
\providecommand{\union}{\cup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\intersect}
% The intersection of two sets.  
%    \begin{macrocode}
\providecommand{\intersect}{\cap}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setdiff}
% The difference of two sets.  $A \setdiff B$ contains everying in $A$
% that is not in $B$.
% Scheinermman uses the minus sign for set difference.
% I prefer the backslash but I don't want to confuse students (more).
% \changes{v0.4.0}{2019/03/28}{Alias \cn{setminus} to \cn{setdiff}}
%    \begin{macrocode}
\newcommand{\setdiff}{-}
\let\origsetminus\setminus
\renewcommand{\setminus}{\setdiff}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\symdiff}
% The symmetric difference of two sets.  
% $A \symdiff B$ contains everything that is in $A$, or in $B$,
% but not both.
%    \begin{macrocode}
\newcommand{\symdiff}{\mathbin{\triangle}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\PowerSet}
% The power set of a set
% \begin{example}
% \begin{examplecode}
%    $\PowerSet{A} = \setst{B}{B \subseteq A}$
% \end{examplecode}
% \end{example}
%    \begin{macrocode}
\newcommand{\PowerSet}[1]{2^{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Card}
% \changes{v0.5.0}{2019/05/30}{Added this command}
% Cardinality of a set
% \begin{example}
% \begin{examplecode}
%    $\Card{\set{1,2,3}} = 3$
% \end{examplecode}
% \end{example}
%    \begin{macrocode}
\newcommand{\Card}[1]{\left|#1\right|}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Proof}
%
% \begin{macro}{\raa}
% Symbol to indicate a contradiction has been reached.
% Initialism of \emph{reductio ad absurdam}, just like
% QED is an initialism of \emph{quod erat demonstrantum}.
% \begin{example}
% \begin{examplecode}
%    \raa
% \end{examplecode}
% \end{example}
%    \begin{macrocode}
\newcommand{\raa}{$\Rightarrow\Leftarrow$}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Functions}
%
% \begin{macro}{\dom}
% \changes{v0.5.0}{2019/05/30}{Added this command}
% The domain of a function.
% \begin{example}
% \begin{examplecode}
%    $\dom f = \set{1,2,3}$
% \end{examplecode}
% \end{example}
%    \begin{macrocode}
\newcommand{\dom}[1]{\operatorname{dom}#1}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\im}
% \changes{v0.5.0}{2019/05/30}{Added this command}
% The image of a function.
%
% FIXME: This is also defined in \pkg{leintex2e}.  Add a package option that,
% if set, and the command already exists and does something else, overwrites.
%
% Interface? [overwrite-im,overwrite-setst,...]
% This allows for unsetting by setting overwrite-im=no later.  OTOH, one key
% per command.
%
% \begin{example}
% \begin{examplecode}
%    $\im f = \set{4,5,6}$
% \end{examplecode}
% \end{example}
%    \begin{macrocode}
\newcommand{\im}[1]{\operatorname{im}#1}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\comp}
% \changes{v0.3}{2018/11/19}{Added this command}
% Composition of functions.
%    \begin{macrocode}
\providecommand{\comp}{\mathrel{\raisebox{0.175ex}{$\scriptstyle\circ$}}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\from}
% \changes{v0.3}{2018/11/19}{Added this command}
% Semantic replacement for \cn{colon} between a function's name and its domain.
%    \begin{macrocode}
\providecommand{\from}{\colon}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\IdentityFunction}
% \changes{v0.3}{2018/11/19}{Added this command}
% The identity function on a set.
% The optional argument gives the name of the set.
%    \begin{macrocode}
\newcommand{\IdentityFunction}[1][\relax]{%
    \mathord{\mathrm{id}}\ifx#1\relax\else_{#1}\fi
}
%    \end{macrocode}
% \end{macro}
% \begin{example}
%    \begin{examplecode}
%        If $f \from \Z \to \Z$ is invertible,
%        then $f \comp f^{-1} = \IdentityFunction[\Z]$.
%    \end{examplecode}
% \end{example}
%
%
% \subsection{Permutations}
%
% \begin{macro}{\sgn}
% The sign of a permutation.
% \begin{example}
%    \begin{examplecode}
%        $\sgn\iota = 1$
%    \end{examplecode}
% \end{example}
%    \begin{macrocode}
\providecommand{\sgn}{\operatorname{sgn}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Integer Division}
%
% \begin{macro}{\idiv}
% \changes{v0.4.0}{2019/05/08}{Added this command}
% Integer division.
% \begin{example}
%    \begin{examplecode}
%        $-17 \idiv 4 = -5$
%    \end{examplecode}
% \end{example}
%    \begin{macrocode}
\providecommand{\idiv}{\mathbin{\text{div}}}
%    \end{macrocode}
% \end{macro}
%
% That's the end!
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
%
% \section{Developer Notes}
% 
% \changes{v0.4.1}{2019/05/30}{Added checklist for version release}
% \changes{v0.4.2}{2019/05/30}{Correct pseudoscript in versioning checklist}
% \changes{v0.4.3}{2019/05/30}{Update versioning checklist}
% \changes{v0.5.0}{2019/05/30}{Correct git push lines}
% Here is the versioning process:
% 
% \begin{enumerate}
%   \item Edit and make changes.  Use the \cn{changes} macro to record the 
%         dates, but keep the version name \texttt{unreleased}.
%   \item Tag the source files and repository.
%         We use \href{https://semver.org/}{semantic versioning}.  
%         The version tag is a literal \texttt{v} with the version number
%         appended.  The most recent release at the time of this writing 
%         is 0.4.2, so the tag is \texttt{v0.4.2}.
%
%         To get the current version, use the shell command
%         \lstinline[style=terminal]!git tag! and look for the most recent
%         version tag. Alternatively, the \cn{ProvidesPackage} line at the
%         top of this file provides the version number.
%
%         If \texttt{\textsl{newtag}} is the tag name for the next version, 
%         run:
% \begin{lstterm}[emph={newtag}]
% $ l3build tag newtag
% \end{lstterm}
% 
%         \texttt{l3build} will reject an invalid tag name, and won't tag a
%         dirty working directory.  Assuming those checks are passed, the 
%         source files will be updated with the new version name and date.
%         This includes marking all \texttt{unreleased} changes with the new
%         version name.  The new files will be committed, and the repository
%         tagged.  
%
%   \item To push changes to github, run
% \begin{lstterm}
% $ git push
% $ git push --tags
% \end{lstterm}
% \end{enumerate}
%
%% \bibliographystyle{abbrv}
%% \bibliography{\jobname}
%
% \Finale
% \endinput
%<*bibliography>
%</bibliography>
